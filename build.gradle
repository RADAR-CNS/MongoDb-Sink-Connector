plugins {
    id 'java-library'
    id 'idea'
    id "com.jfrog.bintray" version "1.7.3" apply false
}

version = '0.2.1'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

ext.slf4jVersion = '1.7.25'
ext.kafkaVersion = '1.0.0-cp1'
ext.mongodbVersion = '3.6.1'
ext.confluentVersion = '4.0.0'


configurations {
    codacy
    provided
    compile.extendsFrom provided
}
// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url 'http://dl.bintray.com/typesafe/maven-releases' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compileOnly group: 'org.slf4j', name:'slf4j-api', version: slf4jVersion

    // to implement producers and consumers
    compileOnly group: 'org.apache.kafka', name: 'connect-api', version: kafkaVersion
    provided group: 'io.confluent', name: 'kafka-avro-serializer', version: confluentVersion

    provided group: 'org.apache.kafka', name: 'kafka_2.11', version: kafkaVersion

    api group: 'org.mongodb', name: 'mongo-java-driver', version: mongodbVersion
}

jar {
    manifest {
        attributes 'Implementation-Title': 'RADAR-CNS MongoDB connector',
                'Implementation-Version': version
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

String[] excludeJars = []
if (!hasProperty('profile')) {
    ext.profile = 'dev'
}

if (profile == 'docker') {
    // Already present in the kafka-connect docker image
    excludeJars = ["common-utils-${confluentVersion}.jar", "kafka-avro-serializer-${confluentVersion}.jar", "kafka-clients-${kafkaVersion}.jar"
                   , "kafka-schema-registry-client-${confluentVersion}.jar", "kafka_2.11-${kafkaVersion}.jar"]
}

apply from: "gradle/profile.${profile}.gradle"

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath.files{
        exclude(excludeJars)
    }
    into "${buildDir}/third-party/"
}

assemble.dependsOn copyDependencies
