plugins {
    // Apply the java plugin to add support for Java
    id 'java-library'
    id 'idea'
    id 'jacoco'
    id 'pmd'
    id 'checkstyle'
    id "com.jfrog.bintray" version "1.7.3"
    id 'maven-publish'
}

version = '0.2-SNAPSHOT'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

ext.slf4jVersion = '1.7.25'
ext.kafkaVersion = '1.0.0'
ext.mongodbVersion = '3.6.1'

ext.junitVersion = '4.12'
ext.hamcrestVersion = '1.3'
ext.mockitoVersion = '2.2.29'

configurations {
    codacy
    provided
    compile.extendsFrom provided
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url 'https://jitpack.io' }
    maven { url 'http://dl.bintray.com/typesafe/maven-releases' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    provided group: 'org.slf4j', name:'slf4j-api', version: slf4jVersion

    // to implement producers and consumers
    provided group: 'org.apache.kafka', name: 'connect-api', version: kafkaVersion
    api group: 'org.mongodb', name: 'mongo-java-driver', version: mongodbVersion

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion

    codacy 'com.github.codacy:codacy-coverage-reporter:1.0.10'
}


jar {
    manifest {
        attributes 'Implementation-Title': 'RADAR-CNS MongoDB connector',
                'Implementation-Version': version
    }
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

checkstyle {
    toolVersion '6.16'
}

pmd {
    toolVersion = '5.5.2'
    consoleOutput = true

    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}


pmdTest {
    ruleSetFiles = files("config/pmd/test_ruleset.xml")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

task downloadDependencies(type: Exec) {
    configurations.testRuntime.files
    configurations.codacy.files
    configurations.jacocoAnt.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy
    args = ['-l', 'Java', '-r', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "RADAR-CNS Distributions"
        }
    }
    developers {
        developer {
            id "radar-cns"
            name "Nivethika"
            email "nivethika@thehyve.nl"
        }
    }
}
// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}


publishing {
    publications {
        RadarMongoDBPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'org.radarcns'
            artifactId 'kafka-connect-mongodb-sink'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'The MongoDB sink connector is a tool for scalably and reliably streaming data between Apache Kafka and MongoDB.')
                root.appendNode('name', 'kafka-connect-mongodb-sink')
                root.appendNode('url', 'https://github.com/RADAR-CNS/MongoDb-Sink-Connector.git')
                root.children().last() + pomConfig
            }
        }
    }
}



bintray {
    user = System.getenv('BINTRAY_USER') ? System.getenv('BINTRAY_USER') : project.hasProperty('bintrayUser')
    key =  System.getenv('BINTRAY_API_KEY') ? System.getenv('BINTRAY_API_KEY') : project.hasProperty('bintrayApiKey')
    override = false
    publications = ['RadarMongoDBPublication']
    pkg {
        repo = 'org.radarcns'
        name = 'kafka-connect-mongodb-sink'
        userOrg = 'radar-cns'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/RADAR-CNS/MongoDb-Sink-Connector.git'
        version {
            name = project.version
            desc = 'Initial alpha release'
            vcsTag = System.getenv('TRAVIS_TAG')
            released  = new Date()
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}
