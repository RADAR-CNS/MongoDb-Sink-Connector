plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'pmd'
    id 'checkstyle'
}

version = '0.1-SNAPSHOT'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

ext.slf4jVersion = '1.7.21'
ext.kafkaVersion = '0.10.1.0'
ext.mongodbVersion = '3.3.0'

ext.junitVersion = '4.12'
ext.hamcrestVersion = '1.3'
ext.mockitoVersion = '2.2.29'

configurations {
    codacy
    provided
    compile.extendsFrom provided
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url 'https://jitpack.io' }
    maven { url 'http://dl.bintray.com/typesafe/maven-releases' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    provided group: 'org.slf4j', name:'slf4j-api', version: slf4jVersion

    // to implement producers and consumers
    provided group: 'org.apache.kafka', name: 'connect-api', version: kafkaVersion
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: mongodbVersion

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testRuntime group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion

    codacy 'com.github.codacy:codacy-coverage-reporter:1.0.10'
}

idea {
    module {
        sourceDirs += file("build/avro")
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'RADAR-CNS MongoDB connector',
                'Implementation-Version': version
    }
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

checkstyle {
    toolVersion '6.16'
}

pmd {
    ignoreFailures = true

    toolVersion = '5.5.2'
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}


pmdTest {
    ruleSetFiles = files("config/pmd/test_ruleset.xml")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

task downloadDependencies(type: Exec) {
    configurations.testRuntime.files
    configurations.codacy.files
    configurations.jacocoAnt.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy
    args = ['-l', 'Java', '-r', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

